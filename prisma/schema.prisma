generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Immobile {
  id           String   @id @default(uuid())
  code         String
  address      String
  name         String?
  type         Type     @default(house)
  price        String
  size         String
  rooms        Int
  bathrooms    Int
  garage       Int
  description  String
  photosId     String[]
  photoPreview String?

  @@map("immobiles")
}

enum Type {
  house
  apartment
  condominium
  ground
  commercial
  residential
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  password      String
  name          String?
  accounts      Account[]
  Session       Session[]
  Authenticator Authenticator[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  userId String
  User   User   @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  userId String
  User   User   @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
